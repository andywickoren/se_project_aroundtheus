!function(){"use strict";class e{constructor(e,t,s,i,n,r){this._name=e.name,this._link=e.link,this._id=e._id,this._isLiked=e.isLiked||!1,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=i,this._handleAddLike=n,this._handleRemoveLike=r}getID(){return this._id}isLiked(){return this._isLiked}setLiked(e){this._isLiked=e,this._likeButton.classList.toggle("card__like-button_active",e)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this.isLiked()?this._handleRemoveLike(this):this._handleAddLike(this)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteClick()})),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardTitle.textContent=this._name,this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)}))}handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}handleLikeIcon(){this._likeButton.classList.toggle("card__like-button_active")}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardTitle=this._cardElement.querySelector(".card__title"),this._cardImage=this._cardElement.querySelector(".card__image"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this.setLiked(this._isLiked),this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._settings=e,this._formElement=t,this._inputElements=Array.from(t.querySelectorAll(e.inputSelector)),this._submitButton=t.querySelector(e.submitButtonSelector),this._setEventListeners()}_showInputError(e,t){const s=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),s.textContent=t,s.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.textContent="",t.classList.remove(this._settings.errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_toggleButtonState(){const e=this._inputElements.some((e=>!e.validity.valid));this._submitButton.disabled=e,this._submitButton.classList.toggle(this._settings.inactiveButtonClass,e)}_setEventListeners(){this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._toggleButtonState()}resetValidation(){this._inputElements.forEach((e=>this._hideInputError(e))),this._submitButton.disabled=!0,this._submitButton.classList.add(this._settings.inactiveButtonClass)}}class s{constructor(e){this._modalElement=document.querySelector(e),this._closeButton=this._modalElement.querySelector(".modal__close"),this._handleModalClose=this._handleModalClose.bind(this)}open(){this._modalElement.classList.add("modal__opened"),document.addEventListener("keydown",this._handleEscape)}close(){this._modalElement.classList.remove("modal__opened"),document.removeEventListener("keydown",this._handleEscape)}_handleEscape=e=>{"Escape"===e.key&&this.close()};_handleModalClose(e){(e.target.classList.contains("modal")||e.target.classList.contains("modal__close"))&&this.close()}getElement(){return this._modalElement}setEventListeners(){this._modalElement.addEventListener("mousedown",this._handleModalClose)}}class i extends s{constructor(e,t){super(e),this._handleFormSubmit=t.bind(this),this._modalForm=this._modalElement.querySelector(".modal__form")}_getInputValues(){const e=this._modalForm.querySelectorAll(".modal__input"),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._modalForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)}))}reset(){this._modalForm.reset()}}const n={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},r=document.forms["edit-modal-form"],o=document.forms["add-card-form"],a=document.querySelector("#profile-edit-modal"),l=(a.querySelector("#edit-modal-close-button"),document.querySelector("#profile-edit-button")),d=document.querySelector(".profile__name"),c=document.querySelector(".profile__description"),h=document.querySelector(".profile__add-button"),_=a.querySelector(".modal__form"),m=_.querySelector(".modal__input_type_name"),u=_.querySelector(".modal__input_type_description"),p=new class{constructor(e){let{baseUrl:t}=e;this._baseUrl=t,this._authToken="20e48b0c-8946-48f3-99d9-01b588193102"}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._authToken}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._authToken}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}renderCards(){return Promise.all()}addCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:s})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removeCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:{authorization:this._authToken,"Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:{authorization:this._authToken,"Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:{authorization:this._authToken,"Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}changeProfilePicture(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1"}),E=new t(n,r);E.enableValidation();const k=new t(n,o),f=new i("#add-card-modal",(function(e){const t=e.title,s=e.url;p.addCard({name:t,link:s}).then((e=>{const t=q(e);L.prependItem(t),f.close(),k.resetValidation(),f.reset()})).catch((e=>{console.error(e)}))})),v=new class extends s{setSubmitAction(e){this._submitCallback=e}setEventListeners(){super.setEventListeners(),confirmDeleteElement.addEventListener("click",(()=>{this._submitCallback}))}open(){this.setSubmitAction(),super.open()}}("#delete-card-modal"),L=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}}({renderer:e=>{const t=q(e);L.addItem(t)}},".cards__list");p.getInitialCards().then((e=>{L.renderItems(e)})).catch((e=>{console.error(e)}));const g=new class extends s{constructor(e){super(e),this._name=this._modalElement.querySelector(".modal__image-label"),this._image=this._modalElement.querySelector(".modal__preview-image")}open(e,t){this._image.src=t,this._name.textContent=e,this._image.alt=`Photo of ${this._name}`,super.open()}}("#preview-image-modal");k.enableValidation();const b=new class{constructor(e){let{profileName:t,profileDescription:s}=e;this._profileName=t,this._profileDescription=s}getUserInfo(){return{name:this._profileName.textContent,description:this._profileDescription.textContent}}setUserInfo(e){let{title:t,description:s}=e;this._profileName.textContent=t,this._profileDescription.textContent=s}}({profileName:d,profileDescription:c});p.getUserInfo().then((e=>{b.setUserInfo({title:e.name,description:e.about})})).catch((e=>{console.error(e)}));const y=v.getElement();function S(){const e=this.getID();v.open(),console.log(y);const t=y.querySelector("#modal__confirm-card-delete");console.log(t),t.addEventListener("click",(()=>{p.removeCard(e).then((()=>{this.handleDeleteCard()}))}))}function C(e){const t=e.getID();p.addLike(t).then((t=>{e.setLiked(!0)})).catch((e=>{console.error(e)}))}function I(e){const t=e.getID();p.removeLike(t).then((t=>{e.setLiked(!1)})).catch((e=>{console.error(e)}))}function q(t){return new e(t,"#card-template",B,S,C,I).getView()}function B(e,t){g.open(e,t)}y.querySelector("#modal__confirm-card-delete").addEventListener("click",(()=>{p.removeCard(id).then((()=>{(void 0).handleDeleteCard()}))})),v.setSubmitAction(S),h.addEventListener("click",(()=>{f.open()}));const T=new i("#profile-edit-modal",(function(e){T.close(),T.reset()}));g.setEventListeners(),T.setEventListeners(),f.setEventListeners(),v.setEventListeners(),l.addEventListener("click",(()=>{const e=b.getUserInfo();m.value=e.name,u.value=e.description,E.resetValidation(),T.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,